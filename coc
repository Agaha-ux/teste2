<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Versos Urbano - Moda Urbana</title>
  <style>
    /* Reset & base */
    * {
      box-sizing: border-box;
    }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      background: #f5f5f7;
      color: #222;
    }
    a {
      text-decoration: none;
      color: inherit;
    }

    /* Header */
    header {
      background: #121212;
      color: #fff;
      padding: 20px 30px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      position: sticky;
      top: 0;
      z-index: 10;
      box-shadow: 0 2px 8px rgba(0,0,0,0.3);
    }
    header h1 {
      font-weight: 900;
      font-size: 1.8rem;
      letter-spacing: 2px;
      cursor: default;
      user-select: none;
      font-family: 'Montserrat', sans-serif;
    }
    .search-bar {
      flex-grow: 1;
      max-width: 400px;
      margin: 0 20px;
      position: relative;
    }
    .search-bar input {
      width: 100%;
      padding: 10px 15px;
      border-radius: 30px;
      border: none;
      font-size: 1rem;
      transition: box-shadow 0.3s ease;
      outline: none;
    }
    .search-bar input:focus {
      box-shadow: 0 0 8px #ff6f61;
    }
    .cart-fav {
      display: flex;
      align-items: center;
      gap: 20px;
    }
    .cart-fav button {
      background: transparent;
      border: none;
      cursor: pointer;
      color: #fff;
      font-size: 1.4rem;
      position: relative;
      transition: color 0.3s ease;
    }
    .cart-fav button:hover {
      color: #ff6f61;
    }
    .cart-fav button .count {
      position: absolute;
      top: -5px;
      right: -10px;
      background: #ff6f61;
      color: white;
      font-size: 0.75rem;
      padding: 2px 6px;
      border-radius: 50%;
      font-weight: 700;
      user-select: none;
    }

    /* Main grid */
    main {
      max-width: 1200px;
      margin: 40px auto;
      padding: 0 20px;
    }
    .products-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill,minmax(220px,1fr));
      gap: 30px;
    }

    /* Product Card */
    .product-card {
      background: white;
      border-radius: 15px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      overflow: hidden;
      display: flex;
      flex-direction: column;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      cursor: pointer;
    }
    .product-card:hover {
      transform: translateY(-8px);
      box-shadow: 0 10px 30px rgba(0,0,0,0.15);
    }
    .product-image {
      width: 100%;
      height: 280px;
      background-size: cover;
      background-position: center;
      transition: transform 0.5s ease;
    }
    .product-card:hover .product-image {
      transform: scale(1.05);
    }
    .product-info {
      padding: 15px 20px;
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }
    .product-name {
      font-weight: 700;
      font-size: 1.1rem;
      margin-bottom: 8px;
      color: #121212;
    }
    .product-price {
      color: #ff6f61;
      font-weight: 700;
      font-size: 1.2rem;
    }
    .actions {
      margin-top: 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .actions button {
      background: #ff6f61;
      border: none;
      padding: 8px 14px;
      color: white;
      border-radius: 30px;
      font-weight: 700;
      cursor: pointer;
      font-size: 0.9rem;
      transition: background-color 0.3s ease;
      flex-grow: 1;
      margin-right: 10px;
      user-select: none;
    }
    .actions button:last-child {
      margin-right: 0;
      background: transparent;
      color: #ff6f61;
      font-size: 1.5rem;
      flex-grow: 0;
      transition: color 0.3s ease;
    }
    .actions button:last-child.favorited {
      color: #e63946;
      filter: drop-shadow(0 0 3px #e63946);
    }
    .actions button:hover:not(:last-child) {
      background: #e85c4b;
    }
    .actions button:last-child:hover {
      color: #d62828;
    }

    /* Similar products section */
    .similar-section {
      margin-top: 60px;
    }
    .similar-section h2 {
      margin-bottom: 25px;
      font-weight: 900;
      font-family: 'Montserrat', sans-serif;
      font-size: 1.5rem;
      color: #333;
      letter-spacing: 1.5px;
    }
    .similar-products {
      display: flex;
      gap: 20px;
      overflow-x: auto;
      padding-bottom: 10px;
      scrollbar-width: thin;
      scrollbar-color: #ff6f61 transparent;
    }
    .similar-products::-webkit-scrollbar {
      height: 8px;
    }
    .similar-products::-webkit-scrollbar-thumb {
      background-color: #ff6f61;
      border-radius: 10px;
    }

    /* Cart modal */
    .cart-modal {
      position: fixed;
      top: 0;
      right: -400px;
      width: 350px;
      height: 100vh;
      background: white;
      box-shadow: -3px 0 15px rgba(0,0,0,0.3);
      padding: 20px;
      transition: right 0.3s ease;
      display: flex;
      flex-direction: column;
      z-index: 100;
    }
    .cart-modal.open {
      right: 0;
    }
    .cart-modal h3 {
      margin-top: 0;
      font-family: 'Montserrat', sans-serif;
      font-weight: 900;
      letter-spacing: 1.5px;
      font-size: 1.4rem;
      color: #ff6f61;
    }
    .cart-items {
      flex-grow: 1;
      overflow-y: auto;
      margin-top: 15px;
    }
    .cart-item {
      display: flex;
      align-items: center;
      margin-bottom: 15px;
      border-bottom: 1px solid #ddd;
      padding-bottom: 10px;
    }
    .cart-item img {
      width: 60px;
      height: 60px;
      border-radius: 10px;
      object-fit: cover;
      margin-right: 15px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    .cart-item-info {
      flex-grow: 1;
    }
    .cart-item-name {
      font-weight: 700;
      margin-bottom: 5px;
      font-size: 1rem;
    }
    .cart-item-price {
      color: #ff6f61;
      font-weight: 700;
    }
    .cart-item-remove {
      background: transparent;
      border: none;
      font-size: 1.3rem;
      color: #d62828;
      cursor: pointer;
      margin-left: 10px;
      user-select: none;
      transition: color 0.3s ease;
    }
    .cart-item-remove:hover {
      color: #b71c1c;
    }
    .cart-footer {
      border-top: 1px solid #ddd;
      padding-top: 15px;
      text-align: right;
      font-weight: 700;
      font-size: 1.2rem;
      color: #333;
    }

    /* Responsive */
    @media (max-width: 700px) {
      header {
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
      }
      .search-bar {
        max-width: 100%;
        order: 3;
        width: 100%;
      }
      .cart-fav {
        order: 2;
        gap: 15px;
      }
      .products-grid {
        grid-template-columns: repeat(auto-fill,minmax(160px,1fr));
        gap: 20px;
      }
      .product-image {
        height: 200px;
      }
      .cart-modal {
        width: 100vw;
      }
    }
  </style>
</head>
<body>

<header>
  <h1>Versos Urbano</h1>
  <div class="search-bar">
    <input type="text" id="searchInput" placeholder="Busque seu estilo..." />
  </div>
  <div class="cart-fav">
    <button id="favoritesBtn" title="Favoritos" aria-label="Favoritos">‚ù§Ô∏è <span class="count" id="favCount">0</span></button>
    <button id="cartBtn" title="Carrinho" aria-label="Carrinho">üõí <span class="count" id="cartCount">0</span></button>
  </div>
</header>

<main>
  <section>
    <div class="products-grid" id="productsGrid">
      <!-- Produtos ser√£o inseridos aqui pelo JS -->
    </div>
  </section>

  <section class="similar-section" id="similarSection" style="display:none;">
    <h2>Roupas Semelhantes Para Voc√™</h2>
    <div class="similar-products" id="similarProducts">
      <!-- Produtos similares -->
    </div>
  </section>
</main>

<!-- Modal do carrinho -->
<aside class="cart-modal" id="cartModal" aria-label="Carrinho de compras">
  <h3>Seu Carrinho</h3>
  <div class="cart-items" id="cartItems">
    <!-- Itens do carrinho -->
  </div>
  <div class="cart-footer" id="cartTotal">
    Total: R$ 0,00
  </div>
</aside>

<script>
  // Dados simulados (poderia vir de uma API real)
  const products = [
    { id: 1, name: "Jaqueta Urbana", price: 149.90, category: "jaqueta", image: "https://images.unsplash.com/photo-1520975698855-3d8db7be5405?auto=format&fit=crop&w=400&q=80" },
    { id: 2, name: "Camiseta Street", price: 59.90, category: "camiseta", image: "https://images.unsplash.com/photo-1520975545684-02a7f9c0b6e9?auto=format&fit=crop&w=400&q=80" },
    { id: 3, name: "Cal√ßa Cargo", price: 129.90, category: "cal√ßa", image: "https://images.unsplash.com/photo-1596464716127-5f7d265f13c7?auto=format&fit=crop&w=400&q=80" },
    { id: 4, name: "Moletom Oversized", price: 179.90, category: "moletom", image: "https://images.unsplash.com/photo-1602810313992-ecf2f7f029bf?auto=format&fit=crop&w=400&q=80" },
    { id: 5, name: "T√™nis Casual", price: 199.90, category: "t√™nis", image: "https://images.unsplash.com/photo-1505740420928-5e560c06d30e?auto=format&fit=crop&w=400&q=80" },
    { id: 6, name: "Bon√© Street", price: 49.90, category: "bon√©", image: "https://images.unsplash.com/photo-1519923041099-62a850e6f9a1?auto=format&fit=crop&w=400&q=80" },
    { id: 7, name: "Jaqueta Jeans", price: 159.90, category: "jaqueta", image: "https://images.unsplash.com/photo-1541099649105-f69ad21f3246?auto=format&fit=crop&w=400&q=80" },
    { id: 8, name: "Camiseta B√°sica", price: 39.90, category: "camiseta", image: "https://images.unsplash.com/photo-1520975545684-02a7f9c0b6e9?auto=format&fit=crop&w=400&q=80" },
    { id: 9, name: "Cal√ßa Jeans Skinny", price: 139.90, category: "cal√ßa", image: "https://images.unsplash.com/photo-1530845646745-41159a33e7a9?auto=format&fit=crop&w=400&q=80" },
    { id: 10, name: "Moletom com Capuz", price: 189.90, category: "moletom", image: "https://images.unsplash.com/photo-1602810313992-ecf2f7f029bf?auto=format&fit=crop&w=400&q=80" }
  ];

  // Estado do app
  let favorites = JSON.parse(localStorage.getItem('favorites')) || [];
  let cart = JSON.parse(localStorage.getItem('cart')) || [];

  const productsGrid = document.getElementById('productsGrid');
  const searchInput = document.getElementById('searchInput');
  const favCount = document.getElementById('favCount');
  const cartCount = document.getElementById('cartCount');
  const favoritesBtn = document.getElementById('favoritesBtn');
  const cartBtn = document.getElementById('cartBtn');
  const cartModal = document.getElementById('cartModal');
  const cartItemsContainer = document.getElementById('cartItems');
  const cartTotal = document.getElementById('cartTotal');
  const similarSection = document.getElementById('similarSection');
  const similarProductsContainer = document.getElementById('similarProducts');

  // Atualiza contadores no header
  function updateCounters() {
    favCount.textContent = favorites.length;
    cartCount.textContent = cart.reduce((acc, item) => acc + item.quantity, 0);
  }

  // Salva localStorage
  function saveState() {
    localStorage.setItem('favorites', JSON.stringify(favorites));
    localStorage.setItem('cart', JSON.stringify(cart));
  }

  // Renderiza produtos na grid principal
  function renderProducts(productsList) {
    productsGrid.innerHTML = '';
    productsList.forEach(p => {
      const isFavorited = favorites.includes(p.id);
      const card = document.createElement('div');
      card.className = 'product-card';
      card.innerHTML = `
        <div class="product-image" style="background-image: url('${p.image}')"></div>
        <div class="product-info">
          <div>
            <div class="product-name">${p.name}</div>
            <div class="product-price">R$ ${p.price.toFixed(2).replace('.', ',')}</div>
          </div>
          <div class="actions">
            <button class="add-cart" aria-label="Adicionar ${p.name} ao carrinho">Adicionar</button>
            <button class="favorite-btn" aria-label="Favoritar ${p.name}">${isFavorited ? '‚ù§Ô∏è' : 'ü§ç'}</button>
          </div>
        </div>
      `;

      // Favoritar
      card.querySelector('.favorite-btn').addEventListener('click', (e) => {
        e.stopPropagation();
        toggleFavorite(p.id);
        renderProducts(productsList);
        renderSimilarSection();
        updateCounters();
      });

      // Adicionar ao carrinho
      card.querySelector('.add-cart').addEventListener('click', (e) => {
        e.stopPropagation();
        addToCart(p.id);
        updateCounters();
        openCart();
      });

      productsGrid.appendChild(card);
    });
  }

  // Toggle favorito
  function toggleFavorite(id) {
    if (favorites.includes(id)) {
      favorites = favorites.filter(favId => favId !== id);
    } else {
      favorites.push(id);
    }
    saveState();
  }

  // Adicionar ao carrinho
  function addToCart(id) {
    const existing = cart.find(item => item.id === id);
    if (existing) {
      existing.quantity++;
    } else {
      cart.push({ id, quantity: 1 });
    }
    saveState();
  }

  // Renderizar itens do carrinho
  function renderCart() {
    cartItemsContainer.innerHTML = '';
    if (cart.length === 0) {
      cartItemsContainer.innerHTML = '<p>Seu carrinho est√° vazio.</p>';
      cartTotal.textContent = 'Total: R$ 0,00';
      return;
    }

    let total = 0;

    cart.forEach(item => {
      const product = products.find(p => p.id === item.id);
      total += product.price * item.quantity;

      const cartItem = document.createElement('div');
      cartItem.className = 'cart-item';
      cartItem.innerHTML = `
        <img src="${product.image}" alt="${product.name}">
        <div class="cart-item-info">
          <div class="cart-item-name">${product.name}</div>
          <div class="cart-item-price">R$ ${(product.price * item.quantity).toFixed(2).replace('.', ',')}</div>
          <div>Qtd: ${item.quantity}</div>
        </div>
        <button class="cart-item-remove" aria-label="Remover ${product.name} do carrinho">&times;</button>
      `;
      cartItem.querySelector('.cart-item-remove').addEventListener('click', () => {
        removeFromCart(product.id);
      });
      cartItemsContainer.appendChild(cartItem);
    });
    cartTotal.textContent = `Total: R$ ${total.toFixed(2).replace('.', ',')}`;
  }

  // Remover do carrinho
  function removeFromCart(id) {
    cart = cart.filter(item => item.id !== id);
    saveState();
    renderCart();
    updateCounters();
  }

  // Abrir / fechar carrinho
  function openCart() {
    cartModal.classList.add('open');
    renderCart();
  }
  function closeCart() {
    cartModal.classList.remove('open');
  }

  // Clique fora do carrinho fecha ele
  document.body.addEventListener('click', (e) => {
    if (!cartModal.contains(e.target) && !cartBtn.contains(e.target)) {
      closeCart();
    }
  });

  // Filtra produtos pela pesquisa
  function filterProducts(query) {
    query = query.trim().toLowerCase();
    if (!query) return products;
    return products.filter(p => p.name.toLowerCase().includes(query) || p.category.toLowerCase().includes(query));
  }

  searchInput.addEventListener('input', () => {
    const filtered = filterProducts(searchInput.value);
    renderProducts(filtered);
  });

  // Mostrar roupas semelhantes baseado nos favoritos (mesma categoria)
  function renderSimilarSection() {
    if (favorites.length === 0) {
      similarSection.style.display = 'none';
      return;
    }

    // Pega categorias dos favoritos
    const favCategories = favorites.map(id => {
      const p = products.find(prod => prod.id === id);
      return p ? p.category : null;
    }).filter(Boolean);

    // Busca produtos similares (mesma categoria, excluindo os favoritos)
    const similarProducts = products.filter(p => favCategories.includes(p.category) && !favorites.includes(p.id));
    if (similarProducts.length === 0) {
      similarSection.style.display = 'none';
      return;
    }

    similarSection.style.display = 'block';
    similarProductsContainer.innerHTML = '';
    similarProducts.forEach(p => {
      const card = document.createElement('div');
      card.className = 'product-card';
      card.style.minWidth = '180px';
      card.innerHTML = `
        <div class="product-image" style="background-image: url('${p.image}')"></div>
        <div class="product-info">
          <div>
            <div class="product-name">${p.name}</div>
            <div class="product-price">R$ ${p.price.toFixed(2).replace('.', ',')}</div>
          </div>
          <div class="actions">
            <button class="add-cart" aria-label="Adicionar ${p.name} ao carrinho">Adicionar</button>
            <button class="favorite-btn">ü§ç</button>
          </div>
        </div>
      `;

      card.querySelector('.add-cart').addEventListener('click', () => {
        addToCart(p.id);
        updateCounters();
        openCart();
      });
      card.querySelector('.favorite-btn').addEventListener('click', () => {
        toggleFavorite(p.id);
        renderSimilarSection();
        renderProducts(filterProducts(searchInput.value));
        updateCounters();
      });

      similarProductsContainer.appendChild(card);
    });
  }

  // Eventos dos bot√µes do header
  favoritesBtn.addEventListener('click', () => {
    // Filtra s√≥ os favoritos para mostrar na grid
    if (favorites.length === 0) {
      alert('Voc√™ n√£o favoritou nenhum produto ainda!');
      return;
    }
    const favProducts = products.filter(p => favorites.includes(p.id));
    renderProducts(favProducts);
  });
  cartBtn.addEventListener('click', () => {
    openCart();
  });

  // Inicializa a p√°gina
  renderProducts(products);
  updateCounters();
  renderSimilarSection();
</script>

</body>
</html>
